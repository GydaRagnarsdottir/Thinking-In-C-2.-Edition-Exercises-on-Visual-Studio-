1.Theory:
Meanings of the keyword static:
(1).Allocate once at fixed memory
(2).Local to particular translation unit.
static is problematic in multithreading.
Ctor & Dtor of static objects.
(1).Default Ctor must be defined if no argument given
(2).exit() call will clear static memory, abort() will not.
(3).Use atexit() to specify actions on exit():
	void func1(){...}
	int main(){atexit(funct1);}
(4).Dtor executes in reversed order of ctor,only objects that have been constructed will be destroyed.
extern vs static:visibility of global vs of local translation unit
=================================================
	variable		function
static	local visibility	local visibility
	static memory		-
extern	global visibility	global visibility
	static memory		-
=================================================
Other storage class specifier:
auto: tell the compiler to allocate memory automatically
register: tell the compiler this variable is heavily used, 	  enable further optimization.

Namespace:
manage member names in a seperate space, for the sole purpose of new name creation.
namespace MySpace{...}
A namespace is
(1)always in global scope or nested in another namespace
(2)can be seperated to multiple head file
(3)can be aliased with another name to save typing
Each translation unit contains an unnamed namespace that guaranteed to be unique.(?)
(4)Namespace resolution:
Namespace::Subnamespace 1::...::Subnamespace N::Class A::Subclass B::...::Subclass N::Memberfunction
(5)When using "using namespace X" in a header file, X will be introduced to all files that include 
this header and being included by this header, meaning namespace has lost its meaning.

Keyword "using": 
(1)called "using directive" when used with namespaces; called "using declaration" with names in a
namespace,could also be used in namespaces.
(2)using directive: import all names in an entire namespace at once, use them without fully qualified.
(3)names introduced by "using" has the local scope, could introduce conflicting names.

static const
(1)static const objects must be initialized externally.
(2)Both const and non-const static objects must be initialized externally.
example:
class A(){
  int ii;
public:
  A(int iii):ii(iii){}
}
class B(){
  //static const A a(100); // (X)
  static const A a;
}
A B::a(100);//(V)

Nested and local classes:
(1)static data members can be declared in nested classes inside other classes, but can't be so in local
classes, which are defined inside of a function.

Static member function
(1)serve the class as a whole instead of individual instances.
(2)keep function names inside file scope instead of introduce possible conflict to global namespace
(3)can't access ordinary data member but only the static ones.
(4)doesn't have "this" implicitly called, hence good for interupt service routine.
(5)Singleton Design Pattern: put an object of a class inside the same class, make it and the constructor 
private so that there could only be one object of that class, and it can't be modified.To completely 
prevent creating another instance of this class, there should be a copy-constructor in the private      
section of the class.

Static initialization dependency
(1)Static nitialization dependencies matter when the initialization of a static object is dependent on  
the other initialization in a different file, but the order of the initialization process is dependent on
the environment, and can't not be garanteed.
(2)To avoid it:
   <i>avoid static initialization
   <ii>when it can't be avoided, put critical initializations in single file
   <iii>if it must be split, use two techniques
	Firstï¼Œis to construct a middle class, and enforce the initialization order inside the class.
	Second, is to wrap the two classes seperately into two functions in a single file and make these 
	functions the only way to access the classes, and enforce the initialization order inside the 
	functions.(The functions must have only one definitions, and NOT be inline,  )


Alternative linkage specification:
Overload the keyword "extern" to specify whether "C" or "C++" linkage is needed.
